// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, phone_number, address, dob, fullname, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID          int32
	Username    string
	Email       string
	PhoneNumber string
	Address     string
	Dob         pgtype.Date
	Fullname    string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Dob,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username, email, phone_number, address, dob, password, fullname)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertUserParams struct {
	Username    string
	Email       string
	PhoneNumber string
	Address     string
	Dob         pgtype.Date
	Password    string
	Fullname    string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Dob,
		arg.Password,
		arg.Fullname,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
